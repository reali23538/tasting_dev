// example-deployment.yaml
apiVersion: apps/v1
kind: Deployment     # 리소스의 종류
metadata:
  name: example-deployment
spec:
  replicas: 3     # 파드를 몇개 유지시킬지 설정
  selector:
    matchLabels:
      app: web-svc-server     # web-svc-server 라벨 파드와 연결
  template:
    metadata:
      name: nginx-server
      labels:
        app: web-svc-server     # web-svc-server 파드
    spec:
      containers:
      - name: nginx-server
        image: nginx:latest
        ports:
        - containerPort: 80

// 디플로이먼트 생성
kubectl apply -f example-deployment.yaml
// 생성된 파드 확인
kubectl get pods



// ClusterIP 타입의 서비스
// example-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-service
spec:
  ports:
    - name: web-svc-port
      port: 8080     # 서비스에 접근할 때 사용할 포트 설정
      targetPort: 80     # 파드의 포트 설정 (example-deployment.yaml의 containerPort)
  selector:
    app: web-svc-server     # web-svc-server라는 라벨을 가지는 파드에 접근 (example-deployment.yaml)
  type: ClusterIP     # 서비스의 타입 설정 (ClusterIP, NodePort, LoadBalancer)

// 서비스 생성
kubectl apply -f example-service.yaml

// 서비스 확인
kubectl get services
kubectl get pods -o wide
// 서비스가 연결된 도착점 확인
kubectl get ep

// 클러스터 내부에서 호출
curl [클러스터 내부 IP]:8080

// 서비스 삭제
kubectl delete svc example-service
kubectl delete -f example-service.yaml



// NodePort 타입의 서비스 
// example-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-service
spec:
  ports:
    - name: web-svc-port
      port: 8080
      targetPort: 80
  selector:
    app: web-svc-server
  type: NodePort     # ClusterIP만 NodePort로 변경됨

// 서비스 생성
kubectl apply -f example-service.yaml

// 서비스 확인
kubectl get services

// 클러스터 외부에서 접근
http://[서버IP]:31602

// 서비스 삭제
kubectl delete svc example-service
// 디플로이먼트 삭제
kubectl delete -f example-deployment.yaml